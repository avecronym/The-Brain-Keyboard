/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const FILE_COPY_ICON = "documents";
const FOLDER_COPY_ICON = "two-blank-pages";
class CopyPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading copy note...');
            this.addCommand({
                id: 'copy-note',
                name: 'Copy active note',
                icon: FILE_COPY_ICON,
                checkCallback: (checking) => {
                    const activeFile = this.app.workspace.getActiveFile(); //return TFile
                    if (activeFile) { //only show command if active note exists
                        if (!checking) {
                            this.copyFile(activeFile, activeFile.parent);
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.registerEvent(this.app.workspace.on("file-menu", (menu, abstractFile, source) => {
                if (abstractFile instanceof obsidian.TFile && source === "pane-more-options") { //file *not in file explorer menu (to avoid overlap with native command)
                    menu.addItem((item) => {
                        item
                            .setTitle("Make a copy")
                            .setIcon(FILE_COPY_ICON)
                            .onClick(() => {
                            this.copyFile(abstractFile, abstractFile.parent);
                        });
                    });
                }
                else if (abstractFile instanceof obsidian.TFolder && source === "file-explorer-context-menu") {
                    menu.addItem((item) => {
                        item
                            .setTitle("Copy folder")
                            .setIcon(FOLDER_COPY_ICON)
                            .onClick(() => {
                            this.copyFolder(abstractFile, abstractFile.parent);
                        });
                    });
                }
            }));
        });
    }
    //copy a file to newFolder with name "Old Name 1"
    copyFile(originalFile, newFileLocation, nameSuffix = " 1", openFile = true) {
        return __awaiter(this, void 0, void 0, function* () {
            let newFileLocationPath = newFileLocation.path;
            const newFilePath = newFileLocationPath + "/" + originalFile.basename + nameSuffix + "." + originalFile.extension;
            const newFile = yield this.app.vault.copy(originalFile, newFilePath);
            if (openFile === true) {
                this.app.workspace.getLeaf().openFile(newFile);
            }
        });
    }
    //recursively copy a folder with name "Old Name 1" to newFolder, without renaming the contents
    copyFolder(originalFolder, newFolderLocation, nameSuffix = " 1") {
        return __awaiter(this, void 0, void 0, function* () {
            let newFolderPath;
            if (newFolderLocation.path === "/") {
                newFolderPath = originalFolder.name + nameSuffix;
            }
            else {
                newFolderPath = newFolderLocation.path + "/" + originalFolder.name + nameSuffix;
            }
            yield this.app.vault.createFolder(newFolderPath);
            const newFolder = this.app.vault.getAbstractFileByPath(newFolderPath);
            //@ts-ignore I promise it's a folder I just made it if it isn't we have problems
            for (const child of originalFolder.children) {
                if (child instanceof obsidian.TFile) {
                    //@ts-ignore
                    yield this.copyFile(child, newFolder, "", false); //no file name suffix, do not open after copying
                }
                else if (child instanceof obsidian.TFolder) {
                    //@ts-ignore
                    yield this.copyFolder(child, newFolder, "");
                }
            }
        });
    }
    onunload() {
        console.log('Unloading copy note');
    }
}

module.exports = CopyPlugin;


/* nosourcemap */